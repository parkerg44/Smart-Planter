#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin 
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define NUMFLAKES     6// Number of hats 

#define LOGO_HEIGHT  24// 16          //24
#define LOGO_WIDTH   64//32          //64
#define plant_width 64
#define plant_height 32

//int X_pin = A2;
//int Y_pin = A1;
int SW_pin = 12;
int button = 3;
int soil = A0;


//Plant Design 1
static const unsigned char PROGMEM Plant1[] ={
  B00000000, B00111101, B00000000, B00011111, B00000000, B00000000, B00000000, B00000000,
  B00000000, B11000011, B00000000, B01100001, B00000000, B00000000, B00000000, B00000000,
  B00000000, B10011001, B00000000, B11001100, B10000000, B00000000, B00000000, B00000000,
  B00000011, B00100100, B11100000, B10010010, B01100000, B00000000, B00000000, B00000000,
  B00000001, B00100100, B10000000, B10010010, B01010000, B00000000, B00000000, B00000000,
  B00000001, B00100100, B10000000, B10010010, B01100000, B00000000, B00000000, B00000000,
  B00000011, B00100100, B10000000, B10010010, B01000000, B00000000, B00000000, B00000000,
  B00000001, B00100100, B10010000, B10010010, B01000000, B00000000, B00000000, B00000000,
  B00000001, B01000001, B11111111, B00100001, B01000000, B00000000, B00000000, B00000000,
  B00011110, B00111100, B00000000, B00111110, B00110000, B00000000, B00000000, B00000000,
  B00001000, B01000001, B00000000, B01000001, B00000100, B00000000, B00000000, B00000000,
  B01010100, B01111110, B00000000, B01111110, B00000010, B00000000, B00000000, B00000000,
  B00100000, B10000001, B00000000, B10000001, B00000001, B10000000, B00000000, B00000000,
  B00100000, B10000001, B00000000, B10000001, B00000001, B10000000, B00000000, B00000000,
  B01000000, B11110001, B00000000, B11110001, B00000000, B10000000, B00000000, B00000000,
  B11000000, B10010001, B00000000, B10010001, B00000000, B10000000, B00000000, B00000000,
  B01000000, B01111110, 000000000, B01111110, B00000000, B11000000, B00000000, B00000000,
  B00110000, B00000000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000,
  B01110000, B00000011, B00000000, B11000000, B00000001, B00000000, B00000000, B00000000, 
  B00011000, B00000001, B10000001, B10000000, B00000011, B10000000, B00000000, B00000000,
  B00000110, B00000000, B01111110, B00000000, B00000100, B00000000, B00000000, B00000000,
  B00000110, B00000000, B00000000, B00000000, B00001000, B00000000, B00000000, B00000000,
  B00011111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00001100, B01100000, B01100011, B00000000, B11001100, B00000000, B00000000, B00000000,
  B00001100, B01110000, B11100011, B10000001, B11001100, B00000000, B00000000, B00000000,
  B00000110, B01100000, B01100011, B00000000, B11011000, B00000000, B00000000, B00000000,
  B00000011, B00100110, B01000000, B10011001, B00110000, B00000000, B00000000, B00000000,
  B00000011, B00010110, B10000000, B01011010, B00110000, B00000000, B00000000, B00000000,  
  B00000011, B00001111, B00000000, B00111100, B00110000, B00000000, B00000000, B00000000,
  B00000001, B10000000, B00000000, B00000000, B01100000, B00000000, B00000000, B00000000,
  B00000000, B11000000, B00000000, B00000000, B11000000, B00000000, B00000000, B00000000,
  B00000000, B01111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000     //32
  };


//Plant design 2
static const unsigned char PROGMEM Plant2[] ={
  B00000000, B00111101, B00000000, B00011111, B00000000, B00000000, B00000000, B00000000,
  B00000000, B11000011, B00000000, B01100001, B00000000, B00000000, B00000000, B00000000,
  B00000000, B10011001, B00000000, B11001100, B10000000, B00000000, B00000000, B00000000,
  B00000011, B00100100, B11100000, B10010010, B01100000, B00000000, B00000000, B00000000,
  B00000001, B00100100, B10000000, B10010010, B01010000, B00000000, B00000000, B00000000,
  B00000001, B00100100, B10000000, B10010010, B01100000, B00000000, B00000000, B00000000,
  B00000011, B00100100, B10000000, B10010010, B01000000, B00000000, B00000000, B00000000,
  B00000001, B00100100, B10010000, B10010010, B01000000, B00000000, B00000000, B00000000,
  B00000001, B01000001, B11111111, B00100001, B01000000, B00000000, B00000000, B00000000,
  B00011110, B00111100, B00000000, B00111110, B00110000, B00000000, B00000000, B00000000,
  B00001000, B01000001, B00000000, B01000001, B00000100, B00000000, B00000000, B00000000,
  B01010100, B01111110, B00000000, B01111110, B00000010, B00000000, B00000000, B00000000,
  B00100000, B10000001, B00000000, B10000001, B00000001, B10000000, B00000000, B00000000,
  B00100000, B10000001, B00000000, B10000001, B00000001, B10000000, B00000000, B00000000,
  B01000000, B11110001, B00000000, B11110001, B00000000, B10000000, B00000000, B00000000,
  B11000000, B10010001, B00000000, B10010001, B00000000, B10000000, B00000000, B00000000,
  B01000000, B01111110, 000000000, B01111110, B00000000, B11000000, B00000000, B00000000,
  B00110000, B00000000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000,
  B01110000, B00000011, B00000000, B11000000, B00000001, B00000000, B00000000, B00000000, 
  B00011000, B00000001, B11111111, B10000000, B00000011, B10000000, B00000000, B00000000,
  B00000110, B00000011, B00000000, B11000000, B00000100, B00000000, B00000000, B00000000,
  B00000110, B00000000, B00000000, B00000000, B00001000, B00000000, B00000000, B00000000,
  B00011111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00001100, B01100000, B01100011, B00000000, B11001100, B00000000, B00000000, B00000000,
  B00001100, B01110000, B11100011, B10000001, B11001100, B00000000, B00000000, B00000000,
  B00000110, B01100000, B01100011, B00000000, B11011000, B00000000, B00000000, B00000000,
  B00000011, B00100110, B01000000, B10011001, B00110000, B00000000, B00000000, B00000000,
  B00000011, B00010110, B10000000, B01011010, B00110000, B00000000, B00000000, B00000000,  
  B00000011, B00001111, B00000000, B00111100, B00110000, B00000000, B00000000, B00000000,
  B00000001, B10000000, B00000000, B00000000, B01100000, B00000000, B00000000, B00000000,
  B00000000, B11000000, B00000000, B00000000, B11000000, B00000000, B00000000, B00000000,
  B00000000, B01111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000     //32
  };


//Plant design 3
static const unsigned char PROGMEM Plant3[] ={
  B00000000, B00111101, B00000000, B00011111, B00000000, B00000000, B00000000, B00000000,
  B00000000, B11000011, B00000000, B01100001, B00000000, B00000000, B00000000, B00000000,
  B00000000, B10011001, B00000000, B11001100, B10000000, B00000000, B00000000, B00000000,
  B00000011, B00100100, B11100000, B10010010, B01100000, B00000000, B00000000, B00000000,
  B00000001, B00100100, B10000000, B10010010, B01010000, B00000000, B00000000, B00000000,
  B00000001, B00100100, B10000000, B10010010, B01100000, B00000000, B00000000, B00000000,
  B00000011, B00100100, B10000000, B10010010, B01000000, B00000000, B00000000, B00000000,
  B00000001, B00100100, B10010000, B10010010, B01000000, B00000000, B00000000, B00000000,
  B00000001, B01000001, B11111111, B00100001, B01000000, B00000000, B00000000, B00000000,
  B00011110, B00111100, B00000000, B00111110, B00110000, B00000000, B00000000, B00000000,
  B00001000, B01000001, B00000000, B01000001, B00000100, B00000000, B00000000, B00000000,
  B01010100, B01111110, B00000000, B01111110, B00000010, B00000000, B00000000, B00000000,
  B00100000, B10000001, B00000000, B10000001, B00000001, B10000000, B00000000, B00000000,
  B00100000, B10000001, B00000000, B10000001, B00000001, B10000000, B00000000, B00000000,
  B01000000, B11110001, B00000000, B11110001, B00000000, B10000000, B00000000, B00000000,
  B11000000, B10010001, B00000000, B10010001, B00000000, B10000000, B00000000, B00000000,
  B01000000, B01111110, 000000000, B01111110, B00000000, B11000000, B00000000, B00000000,
  B00110000, B00000000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000,
  B01110000, B00000000, B01111110, B00000000, B00000001, B00000000, B00000000, B00000000, 
  B00011000, B00000001, B10000001, B10000000, B00000011, B10000000, B00000000, B00000000,
  B00000110, B00000011, B00000000, B11000000, B00000100, B00000000, B00000000, B00000000,
  B00000110, B00000000, B00000000, B00000000, B00001000, B00000000, B00000000, B00000000,
  B00011111, B11111111, B11111111, B11111111, B11111111, B00000000, B00000000, B00000000,
  B00001100, B01100000, B01100011, B00000000, B11001100, B00000000, B00000000, B00000000,
  B00001100, B01110000, B11100011, B10000001, B11001100, B00000000, B00000000, B00000000,
  B00000110, B01100000, B01100011, B00000000, B11011000, B00000000, B00000000, B00000000,
  B00000011, B00100110, B01000000, B10011001, B00110000, B00000000, B00000000, B00000000,
  B00000011, B00010110, B10000000, B01011010, B00110000, B00000000, B00000000, B00000000,  
  B00000011, B00001111, B00000000, B00111100, B00110000, B00000000, B00000000, B00000000,
  B00000001, B10000000, B00000000, B00000000, B01100000, B00000000, B00000000, B00000000,
  B00000000, B11000000, B00000000, B00000000, B11000000, B00000000, B00000000, B00000000,
  B00000000, B01111111, B11111111, B11111111, B00000000, B00000000, B00000000, B00000000     //32
  };



 //Graduation hat logo
static const unsigned char PROGMEM logo_1bmp[] =
{ 
  B00000000, B00000000, B00000000,
  B00000000, B00111100, B00000000,
  B00000000, B11111111, B00000000,
  B00001111, B11111111, B11110000,
  B11111111, B11111111, B11111111,
  B00101111, B11111111, B11110000,
  B00100011, B11111111, B11000000,
  B01000000, B11111111, B00000000,
  B10011000, B00111100, B00011000,
  B01001110, B00000000, B01110000,
  B01001111, B11111111, B11100000,
  B01000001, B11111111, B10000000,
  B11100000, B00000000, B00000000,
  B11010000, B00000000, B00000000,
  B00000000, B00000000, B00000000, 
  B00000000, B00000000, B00000000 };

void setup() {
  pinMode(button,INPUT);
  pinMode(soil,INPUT);
  Serial.begin(9600);     //open up serial port 
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
      }
      
 display.clearDisplay();
 display.setTextSize(1);             // Normal 1:1 pixel scale
 display.setTextColor(SSD1306_WHITE);        // Draw white text
 display.setCursor(5,10); 
 display.println(F("  Congratulations\n       Nataly!"));
 display.display();
 delay(5000);                                                                             //Five seconds
 testanimate(logo_1bmp, 24, 16);    //Display graduation hats
};


//Main loop code: 
//If button is pressed enter write message function, otherwise display the 
void loop() 
{
 int val = 0;
 val = digitalRead(button); 
 if( val != 0)
 {
   dear_who();
   
 }
 else
 {
    measure_soil();
 }
 
}

/***************************************************
Mesure soil function
****************************************************/
void measure_soil()
{
  int soillevel = 0;
  soillevel = analogRead(soil);
  int percent = map(soil, 240,600,100,0);

  //Need to change percent levels for different plants
  
  if(((percent > 0) && (percent < 10)))
  {
     display.clearDisplay();
     display.drawBitmap(0, 0, Plant3, plant_width, plant_height, SSD1306_WHITE);
     display.setTextSize(1);             // Normal 1:1 pixel scale
     display.setTextColor(SSD1306_WHITE);        // Draw white text
     display.setCursor(50,5); 
     display.println(F("Water Level:\n          Low :-("));
     display.display();
     display.clearDisplay();
    //mad plant
    //water level low
  }
  if((percent > 10) && (percent < 20))
  {
     display.clearDisplay();
     display.drawBitmap(0, 0, Plant2, plant_width, plant_height, SSD1306_WHITE);
     display.setTextSize(1);             // Normal 1:1 pixel scale
     display.setTextColor(SSD1306_WHITE);        // Draw white text
     display.setCursor(50,5); 
     display.println(F("Water Level:\n          Okay :-/"));
     display.display();
     display.clearDisplay();
    //unhappy plant 
    //water level falling
  }
  if((percent > 20) || (soillevel == 14) )
  {
     display.clearDisplay();
     display.drawBitmap(0, 0, Plant1, plant_width, plant_height, SSD1306_WHITE);
     display.setTextSize(1);             // Normal 1:1 pixel scale
     display.setTextColor(SSD1306_WHITE);        // Draw white text
     display.setCursor(50,5); 
     display.println(F("Water Level:\n          Great :-)"));
     display.display();
     display.clearDisplay();
    //happy plant 
    //water level good
  }
  
  
}



void dear_who()  //function to write message once a button is pressed
{
 display.clearDisplay();
 display.setTextSize(1);                     // Normal 1:1 pixel scale
 display.setTextColor(SSD1306_WHITE);        // Draw white text
 display.setCursor(5,5); 
 display.println(F("Write your message: "));
 display.display();
 delay(2500);
 display.clearDisplay();
 display.setTextSize(1);                     // Normal 1:1 pixel scale
 display.setTextColor(SSD1306_WHITE);        // Draw white text
 display.setCursor(5,5); 
 display.println(F("repeat these lines to add more text output"));
 display.display();
 delay(5000);
 //...
}


/*
want to move the crosshair by 1 unit in +- x or y update every second 

*/

#define XPOS   0 // Indexes into the 'icons' array in function below
#define YPOS   1
#define DELTAY 2

void testanimate(const uint8_t *bitmap, uint8_t w, uint8_t h) 
{
  int8_t f, icons[NUMFLAKES][3];

  // Initialize 'snowflake' positions
  for(f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
    icons[f][YPOS]   = -LOGO_HEIGHT;
    icons[f][DELTAY] = random(1, 6);
    Serial.print(F("x: "));
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(F(" y: "));
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(F(" dy: "));
    Serial.println(icons[f][DELTAY], DEC);
  }

  for(int k = 0;k < 80;k++) { // Loop forever...
    display.clearDisplay(); // Clear the display buffer

    // Draw each snowflake:
    for(f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, SSD1306_WHITE);
    }

    display.display(); // Show the display buffer on the screen
    delay(100);        // Pause for 1/10 second

    // Then update coordinates of each flake...
    for(f=0; f< NUMFLAKES; f++) {
      icons[f][YPOS] += icons[f][DELTAY];
      // If snowflake is off the bottom of the screen...
      if (icons[f][YPOS] >= display.height()) {
        // Reinitialize to a random position, just off the top
        icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
        icons[f][YPOS]   = -LOGO_HEIGHT;
        icons[f][DELTAY] = random(1, 6);
      }
    }
  }
}
